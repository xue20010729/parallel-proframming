#include <stdio.h>
#include "time.h"
#include<Windows.h>
#include <iostream>
using namespace std;
#define N  64


//?????????
__global__ void cal_sum_ker0(float *Para, float *blocksum_cuda)
{
    int tid = blockIdx.x * blockDim.x + threadIdx.x;


    if(tid < N)
    {
        for (int index = 1; index < blockDim.x; index = (index*2))
        {
            if (threadIdx.x % (index*2) == 0)
            {
                Para[tid] += Para[tid + index];
            }


            __syncthreads();  //??????????????????????????????????????????
        }


        if(threadIdx.x == 0)   //???????????????????????????0?????????????????????0?????
            blocksum_cuda[blockIdx.x] = Para[tid];
    }
}




//??????????
//blockIdx.x??????ID??
//blockDim.x???????????????????????
//threadIdx.x???????????????ID??
__global__ void cal_sum_ker(float *Para, float *blocksum_cuda)
{
    int tid = blockIdx.x * blockDim.x + threadIdx.x;


    if(tid < N)
    {
        //??????????float????????
        extern __shared__ float s_Para[];

        //??????????????????????????????????????????????
        s_Para[threadIdx.x] = Para[tid];
        __syncthreads();    //??????????????????????????????????????


        for (int index = 1; index < blockDim.x; index = (index*2))
        {
            if (threadIdx.x % (index*2) == 0)
            {
                //??for???????????????????????????????????????
                s_Para[threadIdx.x] += s_Para[threadIdx.x + index];
            }


            __syncthreads();  //?????????????????????????????????????????????????
        }


        if(threadIdx.x == 0)   //?????????????0?????????????????????
            blocksum_cuda[blockIdx.x] = s_Para[threadIdx.x];
    }
}

void cal_sum_test()
{
    LARGE_INTEGER nFreq;
    LARGE_INTEGER nBeginTime;
    LARGE_INTEGER nEndTime;


    QueryPerformanceFrequency(&nFreq);

    //????CPU??????
    float *test_d = (float *)malloc(N * sizeof(float));
    for (long long i = 0; i < N; i++)
    {
        test_d[i] = 0.5;
    }


    dim3 sumblock(512);//?????????????512?????
    dim3 sumgrid(((N%sumblock.x) ? (N/sumblock.x + 1) : (N/sumblock.x)));


    float *test_d_cuda;
    float *blocksum_cuda;
    float *blocksum_host = (float *)malloc(sizeof(float) * sumgrid.x);
    cudaMalloc((void **)&test_d_cuda, sizeof(float) * N);
    cudaMalloc((void **)&blocksum_cuda, sizeof(float) * sumgrid.x);


    QueryPerformanceCounter(&nBeginTime);
    //???????CPU???????GPU??
    cudaMemcpy(test_d_cuda, test_d, sizeof(float) * N, cudaMemcpyHostToDevice);
    //?????????????????????
    cal_sum_ker0 <<< sumgrid, sumblock>>> (test_d_cuda, blocksum_cuda);
    //??????????????????GPU???????CPU??
    cudaMemcpy(blocksum_host, blocksum_cuda, sizeof(float) * sumgrid.x, cudaMemcpyDeviceToHost);

    //??CPU????????????????????????????
    double sum = 0.0;
    for(int i = 0; i < sumgrid.x; i++)
    {
        sum += blocksum_host[i];
    }

    QueryPerformanceCounter(&nEndTime);
    cout<<" GPU time (global memory):"<< (double)(nEndTime.QuadPart - nBeginTime.QuadPart)*1.0/nFreq.QuadPart<<endl;

    cout << " GPU result (global memory) = " << sum << endl;   //???GPU????


    //

    QueryPerformanceCounter(&nBeginTime);


    cudaMemcpy(test_d_cuda, test_d, sizeof(float) * N, cudaMemcpyHostToDevice);
    //????????????????????????sumblock.x????????????????????sumblock.x * sizeof(float)???????????????????
    cal_sum_ker <<< sumgrid, sumblock, sumblock.x * sizeof(float) >>> (test_d_cuda, blocksum_cuda);


    cudaMemcpy(blocksum_host, blocksum_cuda, sizeof(float) * sumgrid.x, cudaMemcpyDeviceToHost);

    sum = 0.0;
    for(int i = 0; i < sumgrid.x; i++)
    {
        sum += blocksum_host[i];
    }


    QueryPerformanceCounter(&nEndTime);
    cout<<" GPU time (shared memory) = "<< (double)(nEndTime.QuadPart - nBeginTime.QuadPart)*1.0/nFreq.QuadPart<<endl;

    cout << " GPU result (shared memory) = " << sum << endl;   //???GPU????

    cudaFree(test_d_cuda);
    cudaFree(blocksum_cuda);
    free(blocksum_host);
    free(test_d);
}

int main()
{
    cal_sum_test();
    return 0;
}
